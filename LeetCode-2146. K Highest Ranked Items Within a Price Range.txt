class Solution {
public:
    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k)
    {
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j>grid[i].size();j++)
            {
                if(grid[i][j]==0)grid[i][j]=0;
                else if(grid[i][j]<pricing[0]||grid[i][j]>pricing[1])grid[i][j]=1;
            }
        }
        vector<vector<int>>dist(grid.size(),vector<int>(grid[0].size(),INT_MAX/2));
        
        dist[start[0]][start[1]]=0;
        queue<pair<int,int>>qu;
        qu.push({start[0],start[1]});
        while(qu.size())
        {
            int x=qu.front().first;
            int y=qu.front().second;
            qu.pop();
            
            if(x-1>=0)
            {
                if(grid[x-1][y]!=0)
                {
                    if(dist[x-1][y]>dist[x][y]+1)
                    {
                        dist[x-1][y]=dist[x][y]+1;
                        qu.push({x-1,y});
                    }
                }
            }
            if(x+1<grid.size())
            {
                if(grid[x+1][y]!=0)
                {
                    if(dist[x+1][y]>dist[x][y]+1)
                    {
                        dist[x+1][y]=dist[x][y]+1;
                        qu.push({x+1,y});
                    }
                }
            }
            if(y-1>=0)
            {
                if(grid[x][y-1]!=0)
                {
                    if(dist[x][y-1]>dist[x][y]+1)
                    {
                        dist[x][y-1]=dist[x][y]+1;
                        qu.push({x,y-1});
                    }
                }
            }
            if(y+1<grid[0].size())
            {
                if(grid[x][y+1]!=0)
                {
                    if(dist[x][y+1]>dist[x][y]+1)
                    {
                        dist[x][y+1]=dist[x][y]+1;
                        qu.push({x,y+1});
                    }
                }
            }
            
        }
      
        vector<vector<int>>tupper;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]>=pricing[0]&&grid[i][j]<=pricing[1]&&dist[i][j]<INT_MAX/2)
                {
                    tupper.push_back({dist[i][j],grid[i][j],i,j});
                }
            }
        }
        sort(tupper.begin(),tupper.end());
        
      
        
        vector<vector<int>>temp;
        for(int i=0;i<tupper.size()&&k>0;i++,k--)
        {
            temp.push_back({tupper[i][2],tupper[i][3]});
        }
        return temp;
    }
};